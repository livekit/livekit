// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package service

import (
	"context"
	"fmt"
	"github.com/dTelecom/pubsub-solana"
	"github.com/gagliardetto/solana-go"
	"github.com/inconshreveable/go-vhost"
	"github.com/livekit/livekit-server"
	"github.com/livekit/livekit-server/pkg/clientconfiguration"
	"github.com/livekit/livekit-server/pkg/config"
	"github.com/livekit/livekit-server/pkg/routing"
	"github.com/livekit/livekit-server/pkg/telemetry"
	"github.com/livekit/protocol/auth"
	"github.com/livekit/protocol/egress"
	livekit2 "github.com/livekit/protocol/livekit"
	"github.com/livekit/protocol/logger"
	redis2 "github.com/livekit/protocol/redis"
	"github.com/livekit/protocol/rpc"
	"github.com/livekit/protocol/utils"
	"github.com/livekit/protocol/webhook"
	"github.com/livekit/psrpc"
	"github.com/oschwald/geoip2-golang"
	"github.com/pion/turn/v2"
	"github.com/redis/go-redis/v9"
	"golang.org/x/crypto/acme/autocert"
	"time"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func InitializeServer(conf *config.Config, currentNode routing.LocalNode) (*LivekitServer, error) {
	roomConfig := getRoomConf(conf)
	apiConfig := config.DefaultAPIConfig()
	universalClient, err := createRedisClient(conf)
	if err != nil {
		return nil, err
	}
	nodeID := getNodeID(currentNode)
	messageBus := getMessageBus(universalClient)
	signalRelayConfig := getSignalRelayConfig(conf)
	signalClient, err := routing.NewSignalClient(nodeID, messageBus, signalRelayConfig)
	if err != nil {
		return nil, err
	}
	reader, err := createGeoIP()
	if err != nil {
		return nil, err
	}
	nodeProvider := CreateNodeProvider(reader, conf, currentNode)
	pubSub, err := newPubSub(conf, nodeProvider)
	if err != nil {
		return nil, err
	}
	router := routing.CreateRouter(conf, universalClient, currentNode, signalClient, pubSub)
	objectStore := createStore(pubSub, nodeID)
	roomAllocator, err := NewRoomAllocator(conf, router, objectStore)
	if err != nil {
		return nil, err
	}
	egressClient, err := getEgressClient(conf, nodeID, messageBus)
	if err != nil {
		return nil, err
	}
	rpcClient := egress.NewRedisRPCClient(nodeID, universalClient)
	egressStore := getEgressStore(objectStore)
	keyProvider, err := createKeyProvider(conf)
	if err != nil {
		return nil, err
	}
	notifier, err := createWebhookNotifier(keyProvider, nodeID)
	if err != nil {
		return nil, err
	}
	analyticsService := telemetry.NewAnalyticsService(conf, currentNode)
	telemetryService := telemetry.NewTelemetryService(notifier, analyticsService)
	rtcEgressLauncher := NewEgressLauncher(egressClient, rpcClient, egressStore, telemetryService)
	roomService, err := NewRoomService(roomConfig, apiConfig, router, roomAllocator, objectStore, rtcEgressLauncher)
	if err != nil {
		return nil, err
	}
	egressService := NewEgressService(egressClient, rpcClient, objectStore, egressStore, roomService, telemetryService, rtcEgressLauncher)
	ingressConfig := getIngressConfig(conf)
	ingressClient, err := rpc.NewIngressClient(nodeID, messageBus)
	if err != nil {
		return nil, err
	}
	ingressStore := getIngressStore(objectStore)
	ingressService := NewIngressService(ingressConfig, nodeID, messageBus, ingressClient, ingressStore, roomService, telemetryService)
	rtcService := NewRTCService(conf, roomAllocator, objectStore, router, currentNode, telemetryService)
	keyProviderPublicKey, err := createKeyPublicKeyProvider(conf)
	if err != nil {
		return nil, err
	}
	clientConfigurationManager := createClientConfiguration()
	timedVersionGenerator := utils.NewDefaultTimedVersionGenerator()
	roomManager, err := NewLocalRoomManager(conf, objectStore, currentNode, router, telemetryService, clientConfigurationManager, rtcEgressLauncher, timedVersionGenerator)
	if err != nil {
		return nil, err
	}
	signalServer, err := NewDefaultSignalServer(currentNode, messageBus, signalRelayConfig, router, roomManager)
	if err != nil {
		return nil, err
	}
	authHandler := newTurnAuthHandler(objectStore)
	tlsMuxer, err := NewVhostMuxer(conf)
	if err != nil {
		return nil, err
	}
	manager, err := NewCertManager(conf)
	if err != nil {
		return nil, err
	}
	server, err := newInProcessTurnServer(conf, authHandler, tlsMuxer, manager)
	if err != nil {
		return nil, err
	}
	clientProvider := createClientProvider(conf)
	relevantNodesHandler := createRelevantNodesHandler(nodeProvider)
	mainDebugHandler := createMainDebugHandler(nodeProvider, clientProvider)
	livekitServer, err := NewLivekitServer(conf, roomService, egressService, ingressService, rtcService, keyProviderPublicKey, router, roomManager, signalServer, server, currentNode, clientProvider, nodeProvider, relevantNodesHandler, mainDebugHandler, tlsMuxer, manager)
	if err != nil {
		return nil, err
	}
	return livekitServer, nil
}

// wire.go:

func createRelevantNodesHandler(nodeProvider *NodeProvider) *RelevantNodesHandler {
	return NewRelevantNodesHandler(nodeProvider)
}

func createMainDebugHandler(nodeProvider *NodeProvider, clientProvider *ClientProvider) *MainDebugHandler {
	return NewMainDebugHandler(nodeProvider, clientProvider)
}

func createGeoIP() (*geoip2.Reader, error) {
	return geoip2.FromBytes(livekit.MixmindDatabase)
}

func CreateNodeProvider(geo *geoip2.Reader, config2 *config.Config, node routing.LocalNode) *NodeProvider {
	return NewNodeProvider(geo, node, config2.Solana)
}

func createClientProvider(config2 *config.Config) *ClientProvider {
	return NewClientProvider(config2.Solana)
}

func getNodeID(currentNode routing.LocalNode) livekit2.NodeID {
	return livekit2.NodeID(currentNode.Id)
}

func createKeyProvider(conf *config.Config) (auth.KeyProvider, error) {
	return createKeyPublicKeyProvider(conf)
}

func createKeyPublicKeyProvider(conf *config.Config) (auth.KeyProviderPublicKey, error) {
	return auth.NewSolanaKeyProvider(conf.Solana.WalletPrivateKey), nil
}

func createWebhookNotifier(keyProvider auth.KeyProvider, nodeID livekit2.NodeID) (webhook.Notifier, error) {
	key := string(nodeID)

	secret := keyProvider.GetSecret(key)
	if secret == "" {
		return nil, ErrWebHookMissingAPIKey
	}

	return webhook.NewNotifier(key, secret), nil
}

func createRedisClient(conf *config.Config) (redis.UniversalClient, error) {
	if !conf.Redis.IsConfigured() {
		return nil, nil
	}
	return redis2.GetRedisClient(&conf.Redis)
}

func createStore(
	pubSub *pubsub_solana.PubSub,
	nodeID livekit2.NodeID,
) ObjectStore {
	return NewLocalStore(nodeID, pubSub)
}

func getMessageBus(rc redis.UniversalClient) psrpc.MessageBus {
	if rc == nil {
		return psrpc.NewLocalMessageBus()
	}
	return psrpc.NewRedisMessageBus(rc)
}

func getEgressClient(conf *config.Config, nodeID livekit2.NodeID, bus psrpc.MessageBus) (rpc.EgressClient, error) {
	if conf.Egress.UsePsRPC {
		return rpc.NewEgressClient(nodeID, bus)
	}

	return nil, nil
}

func getEgressStore(s ObjectStore) EgressStore {
	return nil
}

func getIngressStore(s ObjectStore) IngressStore {
	return nil
}

func getIngressConfig(conf *config.Config) *config.IngressConfig {
	return &conf.Ingress
}

func createClientConfiguration() clientconfiguration.ClientConfigurationManager {
	return clientconfiguration.NewStaticClientConfigurationManager(clientconfiguration.StaticConfigurations)
}

func getRoomConf(config2 *config.Config) config.RoomConfig {
	return config2.Room
}

func getSignalRelayConfig(config2 *config.Config) config.SignalRelayConfig {
	return config2.SignalRelay
}

func newInProcessTurnServer(conf *config.Config, authHandler turn.AuthHandler, TLSMuxer *vhost.TLSMuxer, certManager *autocert.Manager) (*turn.Server, error) {
	return NewTurnServer(conf, authHandler, false, TLSMuxer, certManager)
}

func newPubSub(conf *config.Config, nodeProvider *NodeProvider) (*pubsub_solana.PubSub, error) {
	ctx := context.Background()

	pubSub := pubsub_solana.New(logger.GetLogger(), conf.Solana.NetworkHostHTTP, conf.Solana.NetworkHostWS, conf.Solana.EphemeralHostHTTP, conf.Solana.EphemeralHostWS, conf.Solana.WalletPrivateKey)

	go func() {
		var nodesMap map[string]Node
		for len(nodesMap) == 0 {
			time.Sleep(time.Second)
			var err error
			nodesMap, err = nodeProvider.List(ctx)
			if err != nil {
				fmt.Printf("cannot list nodes: %v\n", err)
			} else if len(nodesMap) > 0 {
				break
			}
		}

		nodes := make([]solana.PublicKey, 0, len(nodesMap))
		for nodeID := range nodesMap {
			nodes = append(nodes, solana.MustPublicKeyFromBase58(nodeID))
		}

		if err := pubSub.Start(ctx, nodes); err != nil {
			panic(err)
		}
	}()

	return pubSub, nil
}
